{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["refresh","window","location","reload","weatherIcons","icon","Weather","weatherData","setData","useState","city","setCity","showSearch","setShowSearch","weather","iconPath","searchCity","fetch","process","then","res","json","result","cod","alert","message","className","onClick","name","Button","inverted","circular","style","display","type","placeholder","onChange","e","target","value","onKeyPress","charCode","key","src","alt","moment","format","description","main","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","App","NaN","lat","setLat","long","setLong","data","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","Number","isNaN","console","log","fetchData","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3d659d84.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './styles.css';\r\nimport {Button} from 'semantic-ui-react'\r\nimport moment from \"moment\";\r\n\r\nconst refresh = () => {\r\n    window.location.reload();\r\n};\r\nconst weatherIcons = {\r\n    '01d': {\r\n        icon: 'images/sunny.png'\r\n    },\r\n    '01n': {\r\n        icon: 'images/sunny-night.png'\r\n    },\r\n    '02d': {\r\n        icon: 'images/partly-cloudy.png'\r\n    },\r\n    '02n': {\r\n        icon: 'images/partly-cloudy-night.png'\r\n    },\r\n    '03d': {\r\n        icon: 'images/partly-cloudy.png'\r\n    },\r\n    '03n': {\r\n        icon: 'images/partly-cloudy-night.png'\r\n    },\r\n    '04d': {\r\n        icon: 'images/cloudy.png'\r\n    },\r\n    '04n': {\r\n        icon: 'images/cloudy-night.png'\r\n    },\r\n\r\n    '09d': {\r\n        icon: 'images/rainstorm.png'\r\n    },\r\n    '09n': {\r\n        icon: 'images/rainstorm.png'\r\n    },\r\n    '10d': {\r\n        icon: 'images/rainy.png'\r\n    },\r\n    '10n': {\r\n        icon: 'images/rainy.png'\r\n    },\r\n    '11d': {\r\n        icon: 'images/rainy.png'\r\n    },\r\n    '11n': {\r\n        icon: 'images/rainy.png'\r\n    },\r\n    '13d': {\r\n        icon: 'images/snowy.png'\r\n    },\r\n    '13n': {\r\n        icon: 'images/snowy.png'\r\n    },\r\n    '50d': {\r\n        icon: 'http://openweathermap.org/img/wn/50d@2x.png'\r\n    },\r\n    '05n': {\r\n        icon: 'http://openweathermap.org/img/wn/50d@2x.png'\r\n    },\r\n\r\n}\r\nconst Weather = ({weatherData, setData}) => {\r\n    let [city, setCity] = useState('');\r\n    let [showSearch, setShowSearch] = useState(false);\r\n    const icon = weatherData.weather[0].icon;\r\n    const iconPath = weatherIcons[icon].icon;\r\n\r\n    const toggleShowSearch = () => {\r\n        setShowSearch(!showSearch);\r\n    };\r\n    const searchCity = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/weather/?q=${city}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                if (result.cod === 200) {\r\n                    setData(result);\r\n                    setShowSearch(false);\r\n                } else {\r\n                    alert(result.message);\r\n                    window.location.reload();\r\n                }\r\n            });\r\n    }\r\n    const changeCity = (e) => {\r\n        setCity(e.target.value);\r\n    }\r\n    const handleKeyPress = (e) => {\r\n        if (e.charCode === 13 || e.key === 'Enter') {\r\n            setCity(e.target.value);\r\n            searchCity();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"top\">\r\n                <p className=\"header\" onClick={toggleShowSearch}>{weatherData.name}</p>\r\n                <Button className=\"button\" inverted circular icon='refresh' onClick={refresh}/>\r\n            </div>\r\n            <div className=\"ui action input\" style={{display: showSearch ? 'flex' : 'none'}}>\r\n                <input type=\"text\" placeholder=\"Search...\" onChange={changeCity} onKeyPress={handleKeyPress}/>\r\n                <button className=\"ui button\" onClick={searchCity}>Search</button>\r\n            </div>\r\n            <img className=\"weather-icon\" src={iconPath} alt=\"\"/>\r\n            <div className=\"flex\">\r\n                <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\r\n                <p className=\"description\">{weatherData.weather[0].description}</p>\r\n            </div>\r\n\r\n            <div className=\"flex\">\r\n                <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\r\n                <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n            </div>\r\n            <div className=\"flex\">\r\n                <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n                <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import './App.css';\nimport React, {useEffect, useState} from \"react\";\nimport Weather from './components/weather';\nimport {Dimmer, Loader} from \"semantic-ui-react\";\n\nexport default function App() {\n\n    const [lat, setLat] = useState(NaN);\n    const [long, setLong] = useState(NaN);\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                setLat(position.coords.latitude);\n                setLong(position.coords.longitude);\n            });\n            if (!Number.isNaN(lat) && !Number.isNaN(long)) {\n                console.log(lat + ',' + long);\n                await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n                    .then(res => res.json())\n                    .then(result => {\n                        setData(result);\n                        console.log(result);\n                    });\n            }\n        }\n        fetchData();\n    }, [lat, long]);\n\n    return (\n        <div className=\"App\">\n            {(typeof data.main != 'undefined') ? (\n                <Weather weatherData={data} setData={setData}/>\n            ) : (\n                <div>\n                    <Dimmer active>\n                        <Loader>Loading..</Loader>\n                    </Dimmer>\n                </div>\n            )}\n        </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}